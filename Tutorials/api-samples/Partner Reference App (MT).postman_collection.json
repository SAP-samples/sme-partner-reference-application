{
	"info": {
		"_postman_id": "2392ea1e-cc1e-4112-bfca-cbcf9c7f7648",
		"name": "Partner Reference App (MT)",
		"description": "# SAP Partner Reference Application - OData API Samples\n\nThis Postman collection contains examples to use the OData APIs of the multi-tenant sample application in the SAP samples GitHub repository [SME Partner Reference Application](https://github.com/SAP-samples/sme-partner-reference-application).  \n\nSteps to run the sample requests:\n\n1. Open the Postman environment *Partner Reference App (MT)* and enter the following parameter values.\n| Parameter name:     | Value:                                    |  \n| :------------------ | :---------------------------------------- |\n| *api_url*:          | Enter the *Service Key API-Endpoint*      |           \n| *uaa_clientid*:     | Enter the *Service Key UAA Client-ID*     |                 \n| *uaa_clientsecret*: | Enter the *Service Key UAA Client-Secret* |                                       \n| *uaa_url*:          | Enter the *Service Key UAA-URL*           |\nTo get the parameter values, open the consumer subaccount of the BTP app in the BTP cockpit, and open menu item *Instances and Subscriptions*. Open the service broker instance and find the parameter values in the service key instance.\nCompare as well tutorial \"Configure and Consume the APIs of the BTP Application\" of the Github repository.\n\n2. Open the Postman collection *Partner Reference App (MT)* and open sheet *Authorization*. Select the Postman environment *Partner Reference App (MT)* on the upper right corner and click on *Get New Access Token*. Authenticate on the IDP and finish the authentication with button *Use Token*.\n\n3. Open request *Get author readings* in the Postman collection and *Send* the request.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get author readings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set environment variables for subsequent OData requests\r",
							"var jsonResponse = pm.response.json();\r",
							"pm.environment.set(\"AuthorReadings_ID\", jsonResponse.value[0].ID);\r",
							"pm.environment.set(\"AuthorReading_Identifier\", jsonResponse.value[0].identifier);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings?$filter=identifier eq '{{AuthorReading_Identifier}}'",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings"
					],
					"query": [
						{
							"key": "$filter",
							"value": "identifier eq '{{AuthorReading_Identifier}}'"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new event draft entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"// Validations\r",
							"pm.test(\"Draft entity \" + jsonResponse.identifier + \" \" + jsonResponse.title + \" created\", function () { pm.response.to.have.status(201) });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=true)/AuthorReadingManager.draftEdit",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=true)",
						"AuthorReadingManager.draftEdit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get author reading by key (draft entity)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set environment variables for subsequent OData requests\r",
							"var jsonResponse = pm.response.json();\r",
							"pm.environment.set(\"AuthorReadings_ID\", jsonResponse.ID);\r",
							"pm.environment.set(\"AuthorReading_Identifier\", jsonResponse.identifier);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "IEEE754Compatible",
						"value": "true",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)"
					],
					"query": [
						{
							"key": "$expand",
							"value": "participants($expand=statusCode),statusCode,currency,texts($expand=DraftAdministrativeData),DraftAdministrativeData",
							"disabled": true
						},
						{
							"key": "sap-language",
							"value": "en",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update author reading (draft entity)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"// Validations\r",
							"pm.test(\"Author reading \" + jsonResponse.identifier + \" \" + jsonResponse.title + \" updated\", function () { pm.response.to.have.status(200) });\r",
							"\r",
							"// Set environment variables for subsequent OData requests\r",
							"//pm.environment.set(\"eventID\", jsonResponse.ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"projectID\": \"{{ProjectID}}\",\r\n    \"projectObjectID\": \"{{ProjectObjectID}}\",\r\n    \"projectURL\": \"{{ProjectURL}}\",\r\n    \"projectSystem\": \"{{ProjectSystem}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)"
					]
				}
			},
			"response": []
		},
		{
			"name": "Activate author reading draft entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"// Validations\r",
							"pm.test(\"Author reading \" + jsonResponse.identifier + \" \" + jsonResponse.title + \" activated\", function () { pm.response.to.have.status(200) });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)/AuthorReadingManager.draftActivate",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=false)",
						"AuthorReadingManager.draftActivate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete active author reading entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"// Validations\r",
							"pm.test(\"Author reading deleted\", function () { pm.response.to.have.status(204) });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/odata/v4/authorreadingmanager/AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=true)",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"odata",
						"v4",
						"authorreadingmanager",
						"AuthorReadings(ID={{AuthorReadings_ID}},IsActiveEntity=true)"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "redirect_uri",
				"value": "http://localhost",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "Postman",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{ias_user}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{ias_password}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{uaa_clientsecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{uaa_clientid}}",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{uaa_url}}/oauth/authorize",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{uaa_url}}/oauth/token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}